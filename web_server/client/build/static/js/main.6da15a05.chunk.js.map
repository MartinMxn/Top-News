{"version":3,"sources":["../../../client/src/App/logo.png","../../../client/src/NewsCard/NewsCard.js","../../../client/src/NewsPanel/NewsPanel.js","../../../client/src/App/App.js","../../../client/src/serviceWorker.js","../../../client/src/index.js"],"names":["module","exports","__webpack_require__","p","NewsCard","url","event","window","open","_this","this","react_default","a","createElement","className","onClick","redirectToUrl","props","news","src","urlToImage","alt","title","description","source","reason","time","React","Component","NewsPanel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pageNum","loadedAll","scrollY","pageYOffset","document","documentElement","scrollYTop","innerHeight","body","offsetHeight","console","log","loadMoreNews","_this2","_","debounce","addEventListener","handleScroll","_this3","request","Request","method","fetch","then","res","json","setState","concat","news_list","map","href","src_NewsCard_NewsCard","renderNews","id","App","logo","NewsPanel_NewsPanel_NewsPanel","Boolean","location","hostname","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6da15a05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f9ebcc13.png\";","import './NewsCard.css';\nimport React from 'react';\n// import Auth from '../Auth/Auth';\n\nclass NewsCard extends React.Component {\n    redirectToUrl(url, event) {\n        // event.preventDefault();\n        // this.sendClickLog();\n        window.open(url, '_blank');\n    }\n\n    // sendClickLog() {\n    //     const url = 'http://' + window.location.hostname + ':3000' +\n    //         '/news/userId/' + Auth.getEmail() + '/newsId/' + this.props.news.digest;\n    \n    //     const request = new Request(\n    //       encodeURI(url),\n    //       {\n    //         method: 'POST',\n    //         headers: { 'Authorization': 'bearer ' + Auth.getToken()},\n    //       });\n    \n    //     fetch(request);\n    // }\n\n    render() {\n        return(\n         <div className=\"news-container\" onClick={(event) => this.redirectToUrl(this.props.news.url, event)}>\n           <div className='row'>\n               <div className='col s4 fill'>\n               <img src={this.props.news.urlToImage} alt='news'/>\n               </div>\n               <div className=\"col s8\">\n                  <div className=\"news-intro-col\">\n                    <div className=\"news-intro-panel\">\n                     <h4>{this.props.news.title}</h4>\n                     <div className=\"news-description\">\n                     <p>{this.props.news.description}</p>\n                       <div>\n                          {this.props.news.source != null && <div className='chip light-blue news-chip'>{this.props.news.source}</div>}\n                          {this.props.news.reason != null && <div className='chip light-green news-chip'>{this.props.news.reason}</div>}\n                          {this.props.news.time != null && <div className='chip amber news-chip'>{this.props.news.time}</div>}\n                       </div>\n                     </div>\n                    </div>\n                  </div>\n               </div>\n           </div>\n         </div>\n        );\n\n    }\n}\n\nexport default NewsCard;","import React, { Component } from \"react\";\nimport \"./NewsPanel.css\";\nimport NewsCard from \"../NewsCard/NewsCard\";\nimport _ from \"lodash\";\n// import Auth from '../Auth/Auth';\n\nexport default class NewsPanel extends Component {\n  constructor() {\n    super();\n    this.state = {\n      news: null,\n      pageNum: 1,\n      loadedAll: false\n    };\n  }\n\n  handleScroll() {\n    const scrollY =\n      window.scrollY ||\n      window.pageYOffset ||\n      document.documentElement.scrollYTop;\n    if (window.innerHeight + scrollY >= document.body.offsetHeight - 50) {\n      console.log(\"Loading more news!\");\n      this.loadMoreNews();\n    }\n  }\n\n  componentDidMount() {\n    this.loadMoreNews();\n    this.loadMoreNews = _.debounce(this.loadMoreNews, 1000);\n    console.log(\"load more news\");\n    window.addEventListener(\"scroll\", () => this.handleScroll());\n  }\n\n  loadMoreNews() {\n    // if (this.state.loadedAll == true) {\n    //   return;\n    // }\n\n    // const news_url =\n    //   \"http://\" +\n    //   window.location.hostname +\n    //   \":3000\" +\n    //   \"/news/userId/\" +\n    //   Auth.getEmail() +\n    //   \"/pageNum/\" +\n    //   this.state.pageNum;\n\n    // const request = new Request(news_url, {\n    //   method: \"GET\",\n    //   headers: {\n    //     Authorization: \"bearer \" + Auth.getToken()\n    //   }\n    // });\n\n    let request = new Request('http://localhost:3000/news', {\n      method: 'GET',\n    });\n\n    fetch(request)\n      .then(res => res.json())\n      .then(news => {\n        this.setState({\n          news: this.state.news ? this.state.news.concat(news) : news,\n        })\n      })\n      // .then(news => {\n      //   if (!news || news.length == 0) {\n      //     this.setState({ loadedAll: true });\n      //   }\n\n      //   this.setState({\n      //     news: this.state.news ? this.state.news.concat(news) : news,\n      //     pageNum: this.state.pageNum + 1\n      //   });\n      // });\n  }\n\n  renderNews() {\n    let news_list = this.state.news.map(function(news) {\n      return (\n        <a className=\"list-group-item\" href=\"#\">\n          <NewsCard news={news} />\n        </a>\n      );\n    });\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"list-group\">{news_list}</div>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.news) {\n      return <div>{this.renderNews()}</div>;\n    } else {\n      return (\n        <div>\n          <div id=\"msg-app-loading\">Loading</div>\n        </div>\n      );\n    }\n  }\n}\n","import 'materialize-css';\nimport React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport NewsPanel from '../NewsPanel/NewsPanel'\n\nfunction App() {\n  return (\n    <div>\n      <img className=\"logo\" src={logo} alt=\"logo\"/>\n      <div className=\"container\">\n        <NewsPanel/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}